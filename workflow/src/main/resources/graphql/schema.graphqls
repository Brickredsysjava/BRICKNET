scalar Date

enum Status {
    INITIAL
    COMPLETED
    ON_HOLD
    IN_PROGRESS
}

type Docs {
    id: ID!
    docsName: String!
    timeStamp: Date!
    userPicName: String
    userName: String
}

type Message {
    id: ID!
    content: String!
    timeStamp: Date!
    userPicName: String
    userName: String
}

type Task {
    userid: ID!
    title: String!
    description: String
    userAssigned: [ID!]
    status: Status
    creatorId: ID!
    estimatedStartDate: Date
    estimatedEndDate: Date
    docsList: [Docs!]
    subTasks: [Task!]
    discussion: [Message!]
}
input WorkInput {
    title: String!
    visibility: Boolean
    tags: [String]
    description: String
    userAssignedTeam: [Int]
    status: Status
    estimatedStartDate: Date
    estimatedEndDate: Date
    tasks: [TaskInput]
}
input TaskInput {
    title: String!
    visibility: Boolean!
    tags: [String!]
    description: String
    userAssignedTeam: [ID!]
    status: Status
    creatorId: ID!
    estimatedStartDate: Date
    estimatedEndDate: Date
    subtasks: [TaskInput]
}
type Work {
    id: ID!
    title: String!
    visibility: Boolean!
    active: Boolean!
    tags: [String!]
    description: String
    userAssignedTeam: [ID!]
    status: Status!
    creatorId: ID
    estimatedStartDate: Date
    actualStartDate: Date
    estimatedEndDate: Date
    actualEndDate: Date
    docsList: [Docs]
    tasks: [Task]
    discussion: [Message]
}

type Query {
    works: [Work]
    workById(id: ID!): Work

    tasks: [Task!]!
    task(id: ID!): Task

    docs: [Docs!]!
    doc(id: ID!): Docs

    messages: [Message!]!
    message(id: ID!): Message
}
type Mutation{
    createWork(workInput :WorkInput!):Work
}
